iCow
====

Fatigued by the endless toils of farming, Farmer John has decided
to try his hand in the MP3 player market with the new iCow. It is
an MP3 player that stores N songs (1 <= N <= 1,000) indexed 1 through
N that plays songs in a "shuffled" order, as determined by Farmer
John's own algorithm:

   * Each song i has an initial rating R_i (1 <= R_i <= 10,000).

   * The next song to be played is always the one with
     the highest rating (or, if two or more are tied, the highest
     rated song with the lowest index is chosen).

   * After being played, a song's rating is set to zero, and its rating
     points are distributed evenly among the other N-1 songs.

   * If the rating points cannot be distributed evenly (i.e.,
     they are not divisible by N-1), then the extra points are
     parceled out one at a time to the first songs on the list
     (i.e., R_1, R_2, etc. -- but not the played song) until no
     more extra points remain.

This process is repeated with the new ratings after the next song
is played.

Determine the first T songs (1 <= T <= 1000) that are played by the
iCow.

PROBLEM NAME: icow

INPUT FORMAT:

* Line 1: Two space-separated integers: N and T

* Lines 2..N+1: Line i+1 contains a single integer: R_i

SAMPLE INPUT:

3 4
10
8
11

INPUT DETAILS:

The iCow contains 3 songs, with ratings 10, 8, and 11, respectively.
You must determine the first 4 songs to be played.

OUTPUT FORMAT:

* Lines 1..T: Line i contains a single integer that is the i-th song
        that the iCow plays.

SAMPLE OUTPUT:

3
1
2
3

OUTPUT DETAILS:

The ratings before each song played are:
   R_1  R_2  R_3
    10    8   11  -> play #3  11/2 = 5, leftover = 1
    16   13    0  -> play #1  16/2 = 8
     0   21    8  -> play #2  21/2 = 10, leftover = 1
    11    0   18  -> play #3  ...